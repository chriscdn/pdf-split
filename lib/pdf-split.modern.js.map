{"version":3,"file":"pdf-split.modern.js","sources":["../node_modules/@chriscdn/promise-semaphore/lib/promise-semaphore.modern.js","../src/index.ts"],"sourcesContent":["const e=\"_default\",t=e=>[\"string\",\"number\"].includes(typeof e),s=s=>{var n;return null!=(n=t(s)?s:s.key)?n:e};class n{constructor(e){this.queue=void 0,this.maxConcurrent=void 0,this.count=void 0,this.queue=[],this.maxConcurrent=e,this.count=0}get canAcquire(){return this.count<this.maxConcurrent}incrementCount(){this.count++}decrementCount(){this.count--}acquire(e){return this.canAcquire?(this.incrementCount(),Promise.resolve()):new Promise(t=>{this.queue.push({resolve:t,priority:e}),this.queue.sort((e,t)=>t.priority-e.priority)})}release(){const e=this.queue.shift();e?setTimeout(e.resolve,0):this.decrementCount()}}class r{constructor(e=1){this.semaphoreInstances=void 0,this.maxConcurrent=void 0,this.semaphoreInstances={},this.maxConcurrent=e}hasSemaphoreInstance(t=e){return Boolean(this.semaphoreInstances[t])}getSemaphoreInstance(t=e){return this.hasSemaphoreInstance(t)||(this.semaphoreInstances[t]=new n(this.maxConcurrent)),this.semaphoreInstances[t]}tidy(t=e){this.hasSemaphoreInstance(t)&&0===this.getSemaphoreInstance(t).count&&delete this.semaphoreInstances[t]}canAcquire(t=e){const n=s(t);return!this.hasSemaphoreInstance(n)||this.getSemaphoreInstance(n).canAcquire}acquire(n=e){const r=s(n),i=null!=(o=t(a=n)?0:a.priority)?o:0;var a,o;return this.getSemaphoreInstance(r).acquire(i)}release(t=e){const n=s(t);this.getSemaphoreInstance(n).release(),this.tidy(n)}count(t=e){const n=s(t);return this.hasSemaphoreInstance(n)?this.getSemaphoreInstance(n).count:0}hasTasks(t=e){return this.count(t)>0}async request(t,s=e){try{return await this.acquire(s),await t()}finally{this.release(s)}}async requestIfAvailable(t,s=e){return this.canAcquire(s)?this.request(t,s):null}}class i{constructor(){this._semaphore=new r,this._activeCounts={},this._groupWaiters={}}async acquire(e){var t,s;const n=null!=(t=this._activeCounts[e])?t:0;this._activeCounts[e]=n+1;const r=null!=(s=this._groupWaiters[e])?s:this._semaphore.acquire();this._groupWaiters[e]=r,await r}release(e){const t=this._activeCounts[e];1===t?(this._semaphore.release(),delete this._activeCounts[e],delete this._groupWaiters[e]):this._activeCounts[e]=t-1}}export{i as GroupSemaphore,r as Semaphore};\n//# sourceMappingURL=promise-semaphore.modern.js.map\n","import { promisify } from \"util\";\nimport { exec as _exec } from \"child_process\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { FileCache, FileCacheOptions, FilePath } from \"@chriscdn/file-cache\";\nimport temp from \"temp\";\nimport { Semaphore } from \"@chriscdn/promise-semaphore\";\nimport { pathExists } from \"path-exists\";\n\nconst semaphore = new Semaphore();\nconst execPromise = promisify(_exec);\n\nconst moveFile = async (src: FilePath, dest: FilePath) => {\n    try {\n        // Try a normal rename first\n        await fs.rename(src, dest);\n    } catch (err) {\n        if (err.code === \"EXDEV\") {\n            // Cross-device fallback: copy + delete\n            await fs.copyFile(src, dest);\n            await fs.unlink(src);\n        } else {\n            throw err; // some other error\n        }\n    }\n};\n\ntype PDFArgs = {\n    pdfFilePath: FilePath;\n    pageIndex: number; // 0-based\n};\n\nexport type PDFSplitFileCacheOptions =\n    & Omit<\n        FileCacheOptions<PDFArgs>,\n        \"cb\" | \"ext\"\n    >\n    & {\n        pdfcpu?: FilePath;\n    };\n\nclass PDFSplitFileCache extends FileCache<PDFArgs> {\n    constructor(args: PDFSplitFileCacheOptions) {\n        super({\n            ...args,\n            ext: () => \".pdf\",\n            cb: async (filePath, { pdfFilePath, pageIndex }) => {\n                try {\n                    await semaphore.acquire(pdfFilePath);\n\n                    if (await pathExists(filePath)) {\n                        // all done\n                    } else {\n                        const _thumbnailPath = await temp.mkdir(\n                            \"pdf-thumbnails\",\n                        );\n\n                        const command = [\n                            args.pdfcpu ?? \"pdfcpu\",\n                            \"split\",\n                            pdfFilePath,\n                            _thumbnailPath,\n                        ];\n\n                        await execPromise(command.join(\" \"));\n\n                        const pdfFiles = await fs.readdir(_thumbnailPath);\n\n                        await Promise.all(pdfFiles.map(async (pdfFile) => {\n                            const match = pdfFile.match(/_(\\d+)\\.pdf$/);\n\n                            if (match) {\n                                const _pageIndex = parseInt(match[1], 10) - 1;\n\n                                const sourceFilePath = path.join(\n                                    _thumbnailPath,\n                                    pdfFile,\n                                );\n\n                                const targetFilePath = await this\n                                    .resolveFilePath({\n                                        pdfFilePath,\n                                        pageIndex: _pageIndex,\n                                    });\n\n                                await fs.mkdir(path.dirname(targetFilePath), {\n                                    recursive: true,\n                                });\n\n                                await moveFile(sourceFilePath, targetFilePath);\n                            }\n                        }));\n\n                        // After all that, check if we have a file.\n                        if (await pathExists(filePath)) {\n                            // all good\n                        } else {\n                            throw new Error(\n                                `Invalid range or PDF: ${pageIndex}`,\n                            );\n                        }\n                    }\n                } finally {\n                    semaphore.release(pdfFilePath);\n                }\n            },\n        });\n    }\n}\n\nexport { PDFSplitFileCache };\n"],"names":["semaphore","Semaphore","execPromise","promisify","_exec","moveFile","src","dest","fs","rename","err","code","copyFile","unlink","PDFSplitFileCache","FileCache","constructor","args","_this","_extends","ext","cb","filePath","pdfFilePath","pageIndex","acquire","pathExists","_args$pdfcpu","_thumbnailPath","temp","mkdir","command","pdfcpu","join","pdfFiles","readdir","Promise","all","map","pdfFile","match","_pageIndex","parseInt","sourceFilePath","path","targetFilePath","resolveFilePath","dirname","recursive","Error","release","this"],"mappings":"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"}