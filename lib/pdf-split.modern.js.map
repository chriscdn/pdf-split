{"version":3,"file":"pdf-split.modern.js","sources":["../node_modules/@chriscdn/promise-semaphore/lib/promise-semaphore.modern.js","../src/index.ts"],"sourcesContent":["const e=\"_default\",t=e=>[\"string\",\"number\"].includes(typeof e),s=s=>{var n;return null!=(n=t(s)?s:s.key)?n:e};class n{constructor(e){this.queue=void 0,this.maxConcurrent=void 0,this.count=void 0,this.queue=[],this.maxConcurrent=e,this.count=0}get canAcquire(){return this.count<this.maxConcurrent}incrementCount(){this.count++}decrementCount(){this.count--}acquire(e){return this.canAcquire?(this.incrementCount(),Promise.resolve()):new Promise(t=>{this.queue.push({resolve:t,priority:e}),this.queue.sort((e,t)=>t.priority-e.priority)})}release(){const e=this.queue.shift();e?setTimeout(e.resolve,0):this.decrementCount()}}class r{constructor(e=1){this.semaphoreInstances=void 0,this.maxConcurrent=void 0,this.semaphoreInstances={},this.maxConcurrent=e}hasSemaphoreInstance(t=e){return Boolean(this.semaphoreInstances[t])}getSemaphoreInstance(t=e){return this.hasSemaphoreInstance(t)||(this.semaphoreInstances[t]=new n(this.maxConcurrent)),this.semaphoreInstances[t]}tidy(t=e){this.hasSemaphoreInstance(t)&&0===this.getSemaphoreInstance(t).count&&delete this.semaphoreInstances[t]}canAcquire(t=e){const n=s(t);return!this.hasSemaphoreInstance(n)||this.getSemaphoreInstance(n).canAcquire}acquire(n=e){const r=s(n),i=null!=(o=t(a=n)?0:a.priority)?o:0;var a,o;return this.getSemaphoreInstance(r).acquire(i)}release(t=e){const n=s(t);this.getSemaphoreInstance(n).release(),this.tidy(n)}count(t=e){const n=s(t);return this.hasSemaphoreInstance(n)?this.getSemaphoreInstance(n).count:0}hasTasks(t=e){return this.count(t)>0}async request(t,s=e){try{return await this.acquire(s),await t()}finally{this.release(s)}}async requestIfAvailable(t,s=e){return this.canAcquire(s)?this.request(t,s):null}}class i{constructor(){this._semaphore=new r,this._activeCounts={},this._groupWaiters={}}async acquire(e){var t,s;const n=null!=(t=this._activeCounts[e])?t:0;this._activeCounts[e]=n+1;const r=null!=(s=this._groupWaiters[e])?s:this._semaphore.acquire();this._groupWaiters[e]=r,await r}release(e){const t=this._activeCounts[e];1===t?(this._semaphore.release(),delete this._activeCounts[e],delete this._groupWaiters[e]):this._activeCounts[e]=t-1}}export{i as GroupSemaphore,r as Semaphore};\n//# sourceMappingURL=promise-semaphore.modern.js.map\n","import { promisify } from \"util\";\nimport { exec as _exec } from \"child_process\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { FileCache, FileCacheOptions, FilePath } from \"@chriscdn/file-cache\";\nimport { Semaphore } from \"@chriscdn/promise-semaphore\";\nimport { pathExists } from \"path-exists\";\nimport { PDFCpuInfo } from \"./types\";\nimport { Memoize } from \"@chriscdn/memoize\";\n\nconst semaphore = new Semaphore();\nconst execPromise = promisify(_exec);\n\ntype PDFArgs = {\n    pdfFilePath: FilePath;\n    pageIndex: number; // 0-based\n};\n\nexport type PDFSplitFileCacheOptions =\n    & Omit<\n        FileCacheOptions<PDFArgs>,\n        \"cb\" | \"ext\"\n    >\n    & {\n        pdfcpu?: FilePath;\n    };\n\nconst randomDirectoryName = (l = 16) =>\n    [...Array(l)].map(() => Math.random().toString(36)[2]).join(\"\");\n\nconst quote = (text: string) => `\"${text}\"`;\n\nclass PDFSplitFileCache extends FileCache<PDFArgs> {\n    private pdfcpu: FilePath;\n\n    constructor(args: PDFSplitFileCacheOptions) {\n        super({\n            ...args,\n            ext: () => \".pdf\",\n            cb: async (filePath, { pdfFilePath, pageIndex }) => {\n                try {\n                    // The semaphore prevents multiple consecutive calls (with\n                    // different page numbers) from running the full extraction\n                    // again.\n                    await semaphore.acquire(pdfFilePath);\n\n                    if (await pathExists(filePath)) {\n                        // all done\n                    } else {\n                        // Create a _temp directory in the cache directory to\n                        // hold the temp files. This guarantees the temp files\n                        // are stored on the same volume, which removes problems\n                        // moving the files later.\n                        //\n                        // Orphaned files and empty directories are cleaned up\n                        // by FileCache.\n                        const _thumbnailPath = path.resolve(\n                            args.cachePath,\n                            \"_temp\",\n                            randomDirectoryName(),\n                        );\n\n                        await fs.mkdir(_thumbnailPath, { recursive: true });\n\n                        const command = [\n                            this.pdfcpu,\n                            \"split\",\n                            quote(pdfFilePath),\n                            quote(_thumbnailPath),\n                        ];\n\n                        console.time(\"pdfcpu - split\");\n                        await execPromise(command.join(\" \"));\n                        console.timeEnd(\"pdfcpu - split\");\n\n                        const pdfFiles = await fs.readdir(_thumbnailPath);\n\n                        await Promise.all(pdfFiles.map(async (pdfFile) => {\n                            const match = pdfFile.match(/_(\\d+)\\.pdf$/);\n\n                            if (match?.[1]) {\n                                // The -1 makes this 0-based\n                                const _pageIndex = parseInt(match[1], 10) - 1;\n\n                                const sourceFilePath = path.join(\n                                    _thumbnailPath,\n                                    pdfFile,\n                                );\n\n                                const targetFilePath = await this\n                                    .resolveFilePath({\n                                        pdfFilePath,\n                                        pageIndex: _pageIndex,\n                                    });\n\n                                await fs.mkdir(path.dirname(targetFilePath), {\n                                    recursive: true,\n                                });\n\n                                // these should always be on the same volume, making an fs.rename possible\n                                await fs.rename(sourceFilePath, targetFilePath);\n                            }\n                        }));\n\n                        // After all that, check if we have a file.\n                        if (await pathExists(filePath)) {\n                            // all good\n                        } else {\n                            throw new Error(\n                                `Invalid range or PDF: ${pageIndex}`,\n                            );\n                        }\n                    }\n                } finally {\n                    semaphore.release(pdfFilePath);\n                }\n            },\n        });\n\n        this.pdfcpu = args.pdfcpu ?? \"pdfcpu\";\n        this.pdfInfo = Memoize(this.pdfInfo.bind(this));\n    }\n\n    async pdfInfo(pdfFilePath: FilePath): Promise<PDFCpuInfo> {\n        const command = [\n            this.pdfcpu,\n            \"info -json\",\n            quote(pdfFilePath),\n        ];\n        const { stdout } = await execPromise(command.join(\" \"));\n        return JSON.parse(stdout) as PDFCpuInfo;\n    }\n\n    async pageCount(\n        pdfFilePath: FilePath,\n    ): Promise<PDFCpuInfo[\"infos\"][number][\"pageCount\"]> {\n        const pdfInfo = await this.pdfInfo(pdfFilePath);\n        return pdfInfo.infos[0]!.pageCount;\n    }\n\n    async pages(\n        pdfFilePath: FilePath,\n    ): Promise<FilePath[]> {\n        const pageCount = await this.pageCount(pdfFilePath);\n\n        return await Promise.all(\n            Array.from(\n                { length: pageCount },\n                (_, i) => this.getFile({ pdfFilePath, pageIndex: i }),\n            ),\n        );\n    }\n}\n\nexport { PDFSplitFileCache };\n"],"names":["semaphore","Semaphore","execPromise","promisify","_exec","randomDirectoryName","l","Array","map","Math","random","toString","join","quote","text","PDFSplitFileCache","FileCache","constructor","args","_this","_args$pdfcpu","_extends","ext","cb","filePath","pdfFilePath","pageIndex","acquire","pathExists","_thumbnailPath","path","resolve","cachePath","fs","mkdir","recursive","command","pdfcpu","console","time","timeEnd","pdfFiles","readdir","Promise","all","pdfFile","match","_pageIndex","parseInt","sourceFilePath","targetFilePath","resolveFilePath","dirname","rename","Error","release","this","pdfInfo","Memoize","bind","stdout","JSON","parse","pageCount","infos","pages","from","length","_","i","getFile"],"mappings":"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"}